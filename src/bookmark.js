import storage from './core/storage'

const bookmark = {
    bookmarkBarElement: window.bookmark_bar,
}

/**
 * Create bookmark item from bookmark nodes
 * @param  {Object} node
 * @return {string} HTML generated by bookmark node
 */
bookmark.create = (node) => {
    const { url, title, children } = node

    if (children) {
        setTimeout(() => bookmark.render(node))
        return ''
    }

    return `
    <a class="item" href="${url}">
        <img src="${chrome.runtime.getURL('/_favicon/')}?pageUrl=${url}">
        <div class="title">${title}</div>
    </a>`
}

/**
 * Create a parent of bookmark, this is a group of bookmark items
 * @param  {Object} node
 * @return {string}      HTML generated by bookmark nodes
 */
bookmark.createParent = (node) => {
    const label = node.title
    const nodes = node.children
    const childs = nodes.map((node) => bookmark.create(node)).join('')
    const parentId = `${label}-${node.parentId || 'root'}`
    const status = storage[`bookmark:parent:${parentId}`] || 'open'

    return `
    <div class="parent ${status}">
        <div class="parent-header" data-parent-id="${parentId}">
            <span class="icon icon-folder"></span>
            <div class="label">${label}</div>
        </div>
        <div class="stopgrap"></div>
        <div class="parent-childs">${childs}</div>
    </div>`
}

/**
 * Render bookmark from bookmark node
 * @param  {Object}  node
 * @param  {Boolean} [clear=false] clean bookmark bar before render
 */
bookmark.render = (node, clear = false) => {
    if (clear) {
        bookmark.bookmarkBarElement.innerHTML = ''
    }

    bookmark.bookmarkBarElement.innerHTML += bookmark.createParent(node)
}

/**
 * Toggle open parent
 * @param  {string} id
 */
bookmark.toggleOpenParent = (id) => {
    const open = storage[`bookmark:parent:${id}`] === 'close' ? 'open' : 'close'
    storage[`bookmark:parent:${id}`] = open
    document.querySelector(`[data-parent-id="${id}"]`).parentNode.className = `parent ${open}`
}

bookmark.fetch = () => {
    chrome.topSites.get((tops) => {
        bookmark.render({ children: tops, title: 'Most visited' }, true)

        chrome.bookmarks.getTree((bookmarks) => {
            bookmark.render(bookmarks[0].children[0])
        })
    })
}

bookmark.boot = () => {
    bookmark.bookmarkBarElement.addEventListener('click', ({ target }) => {
        const id = target.getAttribute('data-parent-id') || target.parentNode.getAttribute('data-parent-id')

        if (id) {
            bookmark.toggleOpenParent(id)
        }
    })

    chrome.bookmarks.onCreated.addListener(bookmark.fetch)
    chrome.bookmarks.onRemoved.addListener(bookmark.fetch)
    chrome.bookmarks.onChanged.addListener(bookmark.fetch)
    chrome.bookmarks.onMoved.addListener(bookmark.fetch)

    bookmark.fetch()
}

export default bookmark
