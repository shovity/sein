/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/bookmark.js":
/*!*************************!*\
  !*** ./src/bookmark.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _core_storage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core/storage */ "./src/core/storage.js");


const bookmark = {
  bookmarkBarElement: window.bookmark_bar,
}

/**
 * Create bookmark item from bookmark nodes
 * @param  {Object} node
 * @return {string} HTML generated by bookmark node
 */
bookmark.create = (node) => {
  const { url, title, children } = node

  if (children) {
    setTimeout(() => bookmark.render(node))
    return ''
  }

  return `
    <a class="item" href="${url}">
        <img src="${chrome.runtime.getURL('/_favicon/')}?pageUrl=${url}">
        <div class="title">${title}</div>
    </a>`
}

/**
 * Create a parent of bookmark, this is a group of bookmark items
 * @param  {Object} node
 * @return {string}      HTML generated by bookmark nodes
 */
bookmark.createParent = (node) => {
  const label = node.title
  const nodes = node.children
  const childs = nodes.map((node) => bookmark.create(node)).join('')
  const parentId = `${label}-${node.parentId || 'root'}`
  const status = _core_storage__WEBPACK_IMPORTED_MODULE_0__["default"][`bookmark:parent:${parentId}`] || 'open'

  return `
    <div class="parent ${status}">
        <div class="parent-header" data-parent-id="${parentId}">
            <span class="icon icon-folder"></span>
            <div class="label">${label}</div>
        </div>
        <div class="stopgrap"></div>
        <div class="parent-childs">${childs}</div>
    </div>`
}

/**
 * Render bookmark from bookmark node
 * @param  {Object}  node
 * @param  {Boolean} [clear=false] clean bookmark bar before render
 */
bookmark.render = (node, clear = false) => {
  if (clear) {
    bookmark.bookmarkBarElement.innerHTML = ''
  }

  bookmark.bookmarkBarElement.innerHTML += bookmark.createParent(node)
}

/**
 * Toggle open parent
 * @param  {string} id
 */
bookmark.toggleOpenParent = (id) => {
  const open = _core_storage__WEBPACK_IMPORTED_MODULE_0__["default"][`bookmark:parent:${id}`] === 'close' ? 'open' : 'close'
  _core_storage__WEBPACK_IMPORTED_MODULE_0__["default"][`bookmark:parent:${id}`] = open
  document.querySelector(`[data-parent-id="${id}"]`).parentNode.className = `parent ${open}`
}

bookmark.fetch = () => {
  chrome.topSites.get((tops) => {
    bookmark.render({ children: tops, title: 'Most visited' }, true)

    chrome.bookmarks.getTree((bookmarks) => {
      bookmark.render(bookmarks[0].children[0])
    })
  })
}

bookmark.boot = () => {
  bookmark.bookmarkBarElement.addEventListener('click', ({ target }) => {
    const id = target.getAttribute('data-parent-id') || target.parentNode.getAttribute('data-parent-id')

    if (id) {
      bookmark.toggleOpenParent(id)
    }
  })

  chrome.bookmarks.onCreated.addListener(bookmark.fetch)
  chrome.bookmarks.onRemoved.addListener(bookmark.fetch)
  chrome.bookmarks.onChanged.addListener(bookmark.fetch)
  chrome.bookmarks.onMoved.addListener(bookmark.fetch)

  bookmark.fetch()
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (bookmark);


/***/ }),

/***/ "./src/core/emitter.js":
/*!*****************************!*\
  !*** ./src/core/emitter.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./logger */ "./src/core/logger.js");
/* harmony import */ var _event__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./event */ "./src/core/event.js");



const emitter = {
  mounted: {},
}

/**
 * Emitter generator
 * @param name {string} Emitter name
 * @param handle {function} Call one time for setup emitter
 */
emitter.gen = (name, handle) => {
  if (emitter[name] || !/^[a-zA-Z][a-zA-Z0-9_]{0,63}$/.test(name)) {
    return _logger__WEBPACK_IMPORTED_MODULE_0__["default"].error(`emitter: Name "${name}" existed or invalid`)
  }

  emitter[name] = () => {
    if (emitter.mounted[name]) {
      return _logger__WEBPACK_IMPORTED_MODULE_0__["default"].error(`emitter: Duplicate mount emitter ${name}`)
    }

    handle()

    emitter.mounted[name] = true
  }
}

/**
 * Define emitter
 * ==============
 */

emitter.gen('click', () => {
  function handleClickR(target, domEvent, up = 0) {
    if (up > 5 || !target) {
      return
    }

    const clickEmit = target.getAttribute('click-emit')

    if (!clickEmit) {
      return handleClickR(target.parentElement, domEvent, up + 1)
    }

    const name = clickEmit.split(':')[0]

    let payload = clickEmit.split(':').slice(1).join(':')

    // handle object payload
    if (payload[0] === '?') {
      const payloadObject = {}
      payload
        .slice(1)
        .split('&')
        .forEach((q) => {
          const [key, value] = q.split('=')
          if (key === '') {
            return
          }
          payloadObject[key] = value
        })
      payload = payloadObject
    }

    _event__WEBPACK_IMPORTED_MODULE_1__["default"].next(name, payload, { target, domEvent })
  }

  window.document.body.addEventListener('click', (domEvent) => {
    handleClickR(domEvent.target, domEvent)
  })

  _logger__WEBPACK_IMPORTED_MODULE_0__["default"].info('emiter: Click emiter mounted')
})

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (emitter);


/***/ }),

/***/ "./src/core/event.js":
/*!***************************!*\
  !*** ./src/core/event.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
const event = {
  pool: {},
}

event.emit = (name, ...payload) => {
  for (const handle of event.pool[name] ?? []) {
    handle(...payload)
  }
}

event.on = (name, handle) => {
  event.pool[name]?.push(handle) || (event.pool[name] = [handle])
}

event.next = (name, ...payload) => {
  setTimeout(event.emit, 0, name, ...payload)
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (event);


/***/ }),

/***/ "./src/core/logger.js":
/*!****************************!*\
  !*** ./src/core/logger.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
const LEVEL = ['debug', 'info', 'warning', 'error']

const logger = {
  log_level: 'debug',

  get debug() {
    if (LEVEL.indexOf(this.log_level.toLowerCase()) <= LEVEL.indexOf('debug')) {
      return console.debug.bind(window.console, '%cDEBUG  :', 'color: #6c757d')
    }

    return () => undefined
  },

  get info() {
    if (LEVEL.indexOf(this.log_level.toLowerCase()) <= LEVEL.indexOf('info')) {
      return console.info.bind(window.console, '%cINFO   :', 'color: #17a2b8')
    }

    return () => undefined
  },

  get warning() {
    if (LEVEL.indexOf(this.log_level.toLowerCase()) <= LEVEL.indexOf('warning')) {
      return console.warn.bind(window.console, '%cWARNING:', 'color: #ffc107')
    }

    return () => undefined
  },

  get error() {
    if (LEVEL.indexOf(this.log_level.toLowerCase()) <= LEVEL.indexOf('error')) {
      return console.error.bind(window.error, '%cERROR  :', 'color: #dc3545')
    }

    return () => undefined
  },
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (logger);


/***/ }),

/***/ "./src/core/storage.js":
/*!*****************************!*\
  !*** ./src/core/storage.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./logger */ "./src/core/logger.js");


const storage = {}
const handler = {}

handler.get = (target, key) => {
  if (key === 'origin') {
    return target
  }

  const raw = window.localStorage[key]

  try {
    return raw && JSON.parse(raw)
  } catch (error) {
    return _logger__WEBPACK_IMPORTED_MODULE_0__["default"].error('storage: Parse json fail, key: ', key)
  }
}

handler.set = (target, key, value) => {
  window.localStorage[key] = JSON.stringify(value)
  target[key] = value
  return true
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (new Proxy(storage, handler));


/***/ }),

/***/ "./src/core/util.js":
/*!**************************!*\
  !*** ./src/core/util.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
const util = {}

util.throttle = (wait = 200, trailling = true) => {
  const instance = {
    lock: false,
    handle: null,
  }

  instance.execute = (handle, ...args) => {
    instance.handle = handle

    if (instance.lock) {
      return
    }

    instance.lock = true
    instance.handle(...args)
    instance.handle = null

    setTimeout(() => {
      instance.lock = false

      if (trailling && instance.handle) {
        instance.execute(instance.handle, ...args)
      }
    }, wait)
  }

  return instance
}

util.debounce = (wait = 200) => {
  const instance = {
    timeout: null,
  }

  instance.execute = (handle, ...args) => {
    clearTimeout(instance.timeout)
    instance.timeout = setTimeout(handle, wait, ...args)
  }

  return instance
}

util.raf = () => {
  const instance = {
    lock: false,
    handle: null,
  }

  instance.execute = (handle, ...args) => {
    instance.handle = handle

    if (instance.lock) {
      return
    }

    instance.lock = true

    window.requestAnimationFrame(() => {
      instance.lock = false
      instance.handle(...args)
    })
  }

  return instance
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (util);


/***/ }),

/***/ "./src/modal.js":
/*!**********************!*\
  !*** ./src/modal.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
const modal = {}

modal.hide = () => {
  window.modal.removeClass('modal-show')
}

modal.show = (content) => {
  window.modal_content.innerHTML = content
  window.modal.addClass('modal-show')
}

window.modal.addEventListener('click', ({ target }) => {
  if (target.id === 'modal') {
    modal.hide()
  }
})

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (modal);


/***/ }),

/***/ "./src/noter.js":
/*!**********************!*\
  !*** ./src/noter.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _core_storage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core/storage */ "./src/core/storage.js");
/* harmony import */ var _core_logger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./core/logger */ "./src/core/logger.js");
/* harmony import */ var _core_event__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./core/event */ "./src/core/event.js");
/* harmony import */ var _core_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./core/util */ "./src/core/util.js");
/* harmony import */ var _modal__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./modal */ "./src/modal.js");






const noter = {
  pull_cooldown: 10000,

  call: {
    move: _core_util__WEBPACK_IMPORTED_MODULE_3__["default"].raf(),
    sync: _core_util__WEBPACK_IMPORTED_MODULE_3__["default"].throttle(),
    push: _core_util__WEBPACK_IMPORTED_MODULE_3__["default"].debounce(1000),
  },

  version: null,
  eqCodeReady: null,
  notes: [],
}

noter.fetch = async () => {
  const local = await chrome.storage.local.get(['notes', 'version'])

  noter.notes = local.notes || []
  noter.version = local.version
  noter.render()
}

noter.save = () => {
  const version = Date.now()

  chrome.storage.local.set({
    notes: noter.notes,
    version,
  })

  noter.version = version
  noter.call.push.execute(noter.push)

  _core_logger__WEBPACK_IMPORTED_MODULE_1__["default"].debug('noter: Noter save:', noter.notes)
}

noter.createObject = (note) => {
  const defaultData = {
    msg: '',
    x: Math.floor(Math.random() * (holder.w_w - 500)),
    y: Math.floor(Math.random() * (holder.w_h - 250)),
    w: 300,
    h: 100,
    workspace: _core_storage__WEBPACK_IMPORTED_MODULE_0__["default"].workspace || 0,
    status: 'default',
  }

  return Object.assign(defaultData, note)
}

noter.createElement = (note) => {
  const dom = document.createElement('div')

  dom.setAttribute('id', `noteid_${note.id}`)
  dom.setAttribute('class', 'note')
  dom.setAttribute('style', `transform: translate(${note.x}px, ${note.y}px)`)
  dom.setAttribute('note-status', note.status || 'default')

  dom.innerHTML = `
    <div class="note-controls" note-move-id="${note.id}">
        <div class="note-remove" click-emit="note_remove:${note.id}">&times;</div>
    </div>
    <div class="note-rainbow">
        <div click-emit="note_mark:${note.id},primary"></div>
        <div click-emit="note_mark:${note.id},success"></div>
        <div click-emit="note_mark:${note.id},danger"></div>
    </div>
    <div class="note-editor"
        contenteditable="true"
        spellcheck="false"
        note-editor-id="${note.id}"
        style="width:${note.w}px;height:${note.h - 20}px"
    >${note.msg}</div>`

  noter.handleHashtag(dom)

  return dom
}

noter.add = (note) => {
  // New note don't have a id, push it to noter.notes
  if (note.id === undefined) {
    note.id = Date.now().toString()
    note.updatedAt = Date.now()
    noter.notes.push(note)
  }

  // Render html
  window.note_box.appendChild(noter.createElement(note))
}

noter.render = (clear = true, workspace = +_core_storage__WEBPACK_IMPORTED_MODULE_0__["default"].workspace || 0) => {
  // Clear before render
  if (clear) {
    window.note_box.innerHTML = ''
  }

  // Loop adding
  for (const note of noter.notes) {
    if (workspace === note.workspace) {
      noter.add(note)
    }
  }

  _core_logger__WEBPACK_IMPORTED_MODULE_1__["default"].debug('noter: Render note', noter.notes)
}

noter.handleEqcode = (editor) => {
  // Insert marker
  const sel = window.getSelection()
  const range = sel.getRangeAt(0)
  const markerEl = document.createElement('span')
  markerEl.id = 'caret-marker'
  markerEl.appendChild(document.createTextNode('\u200B'))
  range.insertNode(markerEl)

  const string = editor.innerHTML

  holder.code_tables.forEach((code) => {
    const cregex = new RegExp(code.code)
    const result = string.match(cregex)

    if (result) {
      // Data embedded in command code ex. 'name_(.+?)=='
      const replaces = result.slice(1)
      let codeValue = code.value

      for (const replace of replaces) {
        codeValue = codeValue.replace('$', replace)
      }

      editor.innerHTML = string.replace(cregex, codeValue)
    }
  })

  // Restore carte and remove marker
  const newMarker = document.getElementById('caret-marker')

  if (newMarker) {
    const newRange = document.createRange()
    newRange.setStartAfter(newMarker)
    newRange.collapse(true)
    newMarker.parentNode.removeChild(newMarker)
    sel.removeAllRanges()
    sel.addRange(newRange)
  }
}

noter.handleHashtag = (dom) => {
  const editor = dom.querySelector('.note-editor')
  const head = editor.innerHTML.slice(0, 256)

  const hashtags = head.match(/#[a-z0-9_]{1,12}/gi) || []
  const classes = ['note']

  if (hashtags.includes('#mono')) {
    classes.push('note-ffm')
  }

  dom.className = classes.join(' ')
}

noter.remove = (id) => {
  const index = noter.notes.findIndex((note) => note.id == id)

  if (_core_storage__WEBPACK_IMPORTED_MODULE_0__["default"].workspace === -1 || !noter.notes[index].msg.replace(/(<br>)| /g, '')) {
    noter.notes.splice(index, 1)
  } else {
    noter.notes[index].workspace = -1
    noter.notes[index].removeAt = Date.now()
    noter.notes[index].updatedAt = Date.now()
  }

  // Remove dom
  const dom = window[`noteid_${id}`]
  dom.parentElement.removeChild(dom)

  noter.save()
}

noter.mark = (id, status) => {
  const note = noter.notes.find((n) => n.id == id)

  if (note.status === status) {
    note.status = 'default'
  } else {
    note.status = status
  }

  window[`noteid_${id}`].setAttribute('note-status', note.status)
  noter.save()
}

noter.handleOnChange = ({ target, key }) => {
  const id = target.getAttribute('note-editor-id')

  if (id) {
    const index = noter.notes.findIndex((note) => note.id == id)

    // Check changed
    if (noter.notes[index].msg === target.innerHTML) {
      return
    }

    // Handle note hashtag
    noter.handleHashtag(target.parentElement)

    // Handle note code
    if (key === '=') {
      if (noter.eqCodeReady) {
        noter.handleEqcode(target)
        noter.eqCodeReady = false
      } else {
        noter.eqCodeReady = true
      }
    }

    noter.notes[index].msg = target.innerHTML
    noter.notes[index].updatedAt = Date.now()

    noter.save()
  }
}

noter.pull = async () => {
  if (!_core_storage__WEBPACK_IMPORTED_MODULE_0__["default"].config.sync_url) {
    return
  }

  if (_core_storage__WEBPACK_IMPORTED_MODULE_0__["default"].pull_date > Date.now() - noter.pull_cooldown) {
    return
  }

  const [url, secret] = _core_storage__WEBPACK_IMPORTED_MODULE_0__["default"].config.sync_url.split('#')

  const now = Date.now()

  const excludes = noter.notes.filter((note) => {
    return note.updatedAt >= +_core_storage__WEBPACK_IMPORTED_MODULE_0__["default"].pull_date
  })

  const exclude = excludes
    .map((note) => {
      return `${note.id}:${note.updatedAt}`
    })
    .join(',')

  const response = await fetch(`${url}?date=${_core_storage__WEBPACK_IMPORTED_MODULE_0__["default"].pull_date || 0}&exclude=${exclude}`, {
    method: 'GET',
    headers: {
      'X-Secret': secret,
    },
  })

  const { data } = await response.json()

  if (data?.length) {
    const map = {}
    let shouldRender = false

    for (const note of noter.notes) {
      map[note.id] = note
    }

    for (const { raw: note } of data) {
      if (!map[note.id]?.updatedAt || map[note.id].updatedAt < note.updatedAt) {
        map[note.id] = note
        shouldRender = true
      }
    }

    if (shouldRender) {
      noter.notes = Object.values(map)
      noter.render()
      noter.save()
    }
  }

  _core_storage__WEBPACK_IMPORTED_MODULE_0__["default"].pull_date = now
}

noter.push = async () => {
  if (!_core_storage__WEBPACK_IMPORTED_MODULE_0__["default"].config.sync_url) {
    return
  }

  const notes = noter.notes.filter((note) => {
    return +note.updatedAt > (+_core_storage__WEBPACK_IMPORTED_MODULE_0__["default"].push_date || 0) && note.msg
  })

  const now = Date.now()
  const [url, secret] = _core_storage__WEBPACK_IMPORTED_MODULE_0__["default"].config.sync_url.split('#')

  if (notes.length) {
    await fetch(url, {
      method: 'POST',
      body: JSON.stringify({ notes }),
      headers: {
        'Content-Type': 'application/json',
        'X-Secret': secret,
      },
    })
  }

  _core_storage__WEBPACK_IMPORTED_MODULE_0__["default"].push_date = now
}

noter.clearTrash = () => {
  if (_core_storage__WEBPACK_IMPORTED_MODULE_0__["default"].last_clear_trash > Date.now() - 8e7) {
    return
  }

  _core_storage__WEBPACK_IMPORTED_MODULE_0__["default"].last_clear_trash = Date.now()

  noter.notes = noter.notes.filter((note) => {
    if (note.workspace !== -1) {
      return true
    }

    if (note.removeAt > Date.now() - 864e5 * 30) {
      return true
    }
  })

  noter.save()
}

noter.sort = (screenWidth, screenHeight) => {
  if (!noter.notes.length) return

  // Get current workspace notes
  const workspace = +_core_storage__WEBPACK_IMPORTED_MODULE_0__["default"].workspace || 0
  const workspaceNotes = noter.notes.filter((note) => note.workspace === workspace)

  if (!workspaceNotes.length) return

  // Available screen dimensions
  if (!screenWidth) {
    screenWidth = holder.w_w - 50
  }

  if (!screenHeight) {
    screenHeight = holder.w_h
  }

  const spacing = 10
  const leftMargin = 10
  const topMargin = 10

  // Sort notes by height (tallest first) for better column packing
  const sortedNotes = [...workspaceNotes].sort((a, b) => b.h - a.h)

  // Column-based packing algorithm (top to bottom, left to right)
  const placedNotes = []
  const unplacedNotes = [...sortedNotes]
  let currentX = leftMargin
  let currentY = topMargin
  let columnWidth = 0
  let maxY = topMargin

  // Helper function to check if two notes overlap
  const doNotesOverlap = (note1, note2) => {
    return (
      note1.x < note2.x + note2.w + spacing &&
      note1.x + note1.w + spacing > note2.x &&
      note1.y < note2.y + note2.h + spacing &&
      note1.y + note1.h + spacing > note2.y
    )
  }

  // Helper function to shift overlapping notes to the right
  const shiftOverlappingNotes = (newNote, placedNotes) => {
    let maxShift = 0

    for (const placedNote of placedNotes) {
      if (doNotesOverlap(newNote, placedNote)) {
        // Calculate how much we need to shift the new note to the right
        const requiredShift = placedNote.x + placedNote.w + spacing - newNote.x
        maxShift = Math.max(maxShift, requiredShift)
      }
    }

    return maxShift
  }

  while (unplacedNotes.length > 0) {
    let notePlaced = false

    // Try to find the tallest note that fits in current column
    for (let i = 0; i < unplacedNotes.length; i++) {
      const note = unplacedNotes[i]

      // Check if note fits in current column
      if (currentY + note.h + spacing <= screenHeight) {
        // Place note in current column
        note.x = currentX
        note.y = currentY

        // Check for overlaps and shift if necessary
        const shiftAmount = shiftOverlappingNotes(note, placedNotes)
        if (shiftAmount > 0) {
          note.x += shiftAmount

          // Check if shifted position still fits within screen bounds
          if (note.x + note.w > screenWidth) {
            // If it doesn't fit, try to find a better position
            continue
          }
        }

        currentY += note.h + spacing
        columnWidth = Math.max(columnWidth, note.w)

        // Remove note from unplaced list
        unplacedNotes.splice(i, 1)
        placedNotes.push(note)
        notePlaced = true
        break
      }
    }

    // If no note fits in current column, find best position for next note
    if (!notePlaced) {
      // Find the best available position for the tallest remaining note
      let bestX = leftMargin
      let bestY = topMargin
      let foundPosition = false

      if (unplacedNotes.length > 0) {
        const note = unplacedNotes[0]

        // Try to find a position that fits
        for (let testY = topMargin; testY <= screenHeight - note.h; testY += spacing) {
          for (let testX = leftMargin; testX <= screenWidth - note.w; testX += spacing) {
            // Set temporary position for overlap checking
            note.x = testX
            note.y = testY

            // Check if this position overlaps with any placed notes
            let canPlace = true
            for (const placedNote of placedNotes) {
              if (doNotesOverlap(note, placedNote)) {
                canPlace = false
                break
              }
            }

            if (canPlace) {
              bestX = testX
              bestY = testY
              foundPosition = true
              break
            }
          }
          if (foundPosition) break
        }

        // If no direct position found, try shifting approach
        if (!foundPosition) {
          // Try placing at leftmost position and shift if needed
          note.x = leftMargin
          note.y = topMargin

          const shiftAmount = shiftOverlappingNotes(note, placedNotes)
          if (shiftAmount > 0 && note.x + shiftAmount + note.w <= screenWidth) {
            note.x += shiftAmount
            foundPosition = true
          }
        }

        // Place the note at the best position found
        if (foundPosition) {
          currentX = note.x
          currentY = note.y + note.h + spacing
          columnWidth = note.w

          unplacedNotes.splice(0, 1)
          placedNotes.push(note)
        } else {
          // If still can't place, place it at a random position on screen
          const randomX = Math.floor(Math.random() * (screenWidth - note.w - leftMargin)) + leftMargin
          const randomY = Math.floor(Math.random() * (screenHeight - note.h - topMargin)) + topMargin

          note.x = randomX
          note.y = randomY

          // Update current position for next iteration
          currentX = leftMargin
          currentY = maxY + spacing
          columnWidth = Math.max(columnWidth, note.w)

          unplacedNotes.splice(0, 1)
          placedNotes.push(note)
        }
      }
    }

    // Update maxY
    for (const note of placedNotes) {
      maxY = Math.max(maxY, note.y + note.h)
    }
  }

  // Update all notes with new positions
  for (const note of workspaceNotes) {
    const index = noter.notes.findIndex((n) => n.id === note.id)
    if (index !== -1) {
      noter.notes[index].x = note.x
      noter.notes[index].y = note.y
      noter.notes[index].updatedAt = Date.now()
    }
  }

  // Re-render and save
  noter.render()
  noter.save()

  _core_logger__WEBPACK_IMPORTED_MODULE_1__["default"].debug('noter: Sorted notes using column-based packing algorithm with overlap shifting')
}

noter.boot = () => {
  const state = {
    resize: false,
    move: false,
    deltaX: 0,
    deltaY: 0,
  }

  _core_event__WEBPACK_IMPORTED_MODULE_2__["default"].on('note_remove', (id) => {
    noter.remove(id)
  })

  _core_event__WEBPACK_IMPORTED_MODULE_2__["default"].on('note_mark', (mark) => {
    const [id, status] = mark.split(',')
    noter.mark(id, status)
  })

  // Handle move
  window.note_box.addEventListener('mousedown', (event) => {
    // Prevent right mouse
    if (event.which === 3) {
      return
    }

    const { target } = event

    // Detect resize
    if (target.getAttribute('note-editor-id') !== null) {
      // TODO: Handle disable select when resize
      const cx = event.clientX
      const cy = event.clientY
      const noteId = +target.getAttribute('note-editor-id')
      const noteIndex = noter.notes.findIndex((note) => note.id == noteId)
      const note = noter.notes[noteIndex]

      // Detect mouse down over resize btn
      if (note.x + note.w - cx < 15 && note.y + note.h - cy < 15) {
        state.resize = noteId
      }
    }

    if (target.getAttribute('note-move-id') !== null) {
      // Disable text selection
      document.body.style.userSelect = 'none'

      const noteId = +target.getAttribute('note-move-id')
      const noteIndex = noter.notes.findIndex((note) => note.id == noteId)

      // Fix position mouse vs note
      state.deltaX = event.clientX - noter.notes[noteIndex].x
      state.deltaY = event.clientY - noter.notes[noteIndex].y

      // Start move handle
      state.move = noteId
    }
  })

  window.addEventListener('mousemove', (event) => {
    if (state.move === false) {
      return
    }

    event.preventDefault()

    noter.call.move.execute(() => {
      const dom = window[`noteid_${state.move}`]

      if (dom) {
        const x = Math.min(holder.w_w - 20, Math.max(event.clientX - state.deltaX, 0))
        const y = Math.min(holder.w_h - 20, Math.max(event.clientY - state.deltaY, 0))
        dom.style.transform = `translate(${x}px, ${y}px)`
      }
    })
  })

  window.addEventListener('mouseup', (event) => {
    // Recover text selection
    document.body.style.userSelect = ''

    if (state.move !== false) {
      const x = event.clientX - state.deltaX
      const y = event.clientY - state.deltaY
      const note = noter.notes.find((e) => e.id == state.move)

      if (note) {
        note.x = Math.max(0, Math.min(holder.w_w, x))
        note.y = Math.max(0, Math.min(holder.w_h, y))
        note.updatedAt = Date.now()
      }

      // End move handle
      state.move = false

      // Save when done move a note
      noter.save()
    } else if (state.resize !== false) {
      const note = noter.notes.find((e) => e.id == state.resize)

      if (note) {
        note.w = window['noteid_' + state.resize].offsetWidth
        note.h = window['noteid_' + state.resize].offsetHeight
        note.updatedAt = Date.now()
      }

      // End resize handle
      state.resize = false

      // Save when done move a note
      noter.save()
    }
  })

  window.note_box.addEventListener('keyup', noter.handleOnChange)
  window.note_box.addEventListener('paste', noter.handleOnChange)

  window.note_box.addEventListener('click', ({ target }) => {
    if (target.tagName === 'IMG') {
      _modal__WEBPACK_IMPORTED_MODULE_4__["default"].show(`<img src="${target.src}" style="max-width: calc(100vw - 50px)">`)
    }
  })

  // Listen add note
  _core_event__WEBPACK_IMPORTED_MODULE_2__["default"].on('noter_add', () => {
    noter.add(noter.createObject())
    noter.save()
  })

  // Listen switch workspace
  _core_event__WEBPACK_IMPORTED_MODULE_2__["default"].on('noter_switch_workspace', () => {
    let workspace = +_core_storage__WEBPACK_IMPORTED_MODULE_0__["default"].workspace || 0

    if (workspace > _core_storage__WEBPACK_IMPORTED_MODULE_0__["default"].config.number_of_workspace - 2) {
      workspace = -1
    } else {
      workspace++
    }

    window.btn_switch_workspace.innerHTML = workspace === -1 ? '🗑️' : workspace
    _core_storage__WEBPACK_IMPORTED_MODULE_0__["default"].workspace = workspace

    noter.save()
    noter.render()
  })

  // Handle drag to sort
  if (window.btn_sort_note) {
    let resizing = false

    const caller = _core_util__WEBPACK_IMPORTED_MODULE_3__["default"].throttle(100)

    window.btn_sort_note.addEventListener('mousedown', (event) => {
      resizing = true

      caller.execute(() => {
        noter.sort()
      })
    })

    window.addEventListener('mousemove', (event) => {
      if (!event.buttons || !resizing) {
        return
      }

      caller.execute(() => {
        noter.sort(event.clientX, event.clientY)
      })
    })

    window.addEventListener('mouseup', () => {
      resizing = false
    })
  }

  // Listen sync notes cross tab
  chrome.storage.onChanged.addListener((change, namespace) => {
    if (namespace !== 'local') {
      return
    }

    noter.call.sync.execute(() => {
      if (change.notes && change.version?.newValue > noter.version) {
        noter.notes = change.notes.newValue
        noter.render()
      }
    })
  })

  noter.fetch().then(async () => {
    noter.clearTrash()
    await noter.push()
    await noter.pull()
  })
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (noter);


/***/ }),

/***/ "./src/prototype.js":
/*!**************************!*\
  !*** ./src/prototype.js ***!
  \**************************/
/***/ (() => {

Array.prototype.sum = function () {
  return this.reduce((acc, e) => acc + e)
}

HTMLElement.prototype.addClass = function (className) {
  const regex = new RegExp(`^${className}$|^${className} | ${className}$| ${className}( )`, 'g')
  if (!regex.test(this.className)) {
    this.className = `${this.className} ${className}`.trim()
  }
}

HTMLElement.prototype.removeClass = function (className) {
  const regex = new RegExp(`^${className}$|^${className} | ${className}$| ${className}( )`, 'g')
  this.className = this.className.replace(regex, '$1').trim()
}

HTMLCollection.prototype.toArray = function () {
  return [...this]
}

NodeList.prototype.toArray = function () {
  return [...this]
}


/***/ }),

/***/ "./src/setting.js":
/*!************************!*\
  !*** ./src/setting.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _core_storage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core/storage */ "./src/core/storage.js");
/* harmony import */ var _core_event__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./core/event */ "./src/core/event.js");
/* harmony import */ var _noter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./noter */ "./src/noter.js");
/* harmony import */ var _wallpaper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./wallpaper */ "./src/wallpaper.js");





const setting = {
  isOpen: false,
  blob_buffer_url: null,
}

setting.render = () => {
  // Render wallpaper
  const walW = Math.floor(window.settings_wallpapers.clientWidth / 6 - 11)
  const walH = Math.floor((walW * holder.w_h) / holder.w_w)

  window.settings_wallpapers.innerHTML = Array(12)
    .fill(1)
    .map(() => {
      return `
            <div class="settings-wall-pre"
                style="width: ${walW}px; height: ${walH}px; background-image: url(/img/placeholder.png)"
            ></div>
            `
    })
    .join('')

  chrome.storage.local.get('wallpapers', ({ wallpapers }) => {
    window.settings_wallpapers.innerHTML = wallpapers
      .map((wall, index) => {
        let className = 'settings-wall-pre'

        if (wall.active) {
          className += ' active'
        }

        let inner = ''

        if (wall.editbale) {
          inner += `<span click-emit="setting_wallpaper_edit:${index}">EDIT</span>`
        }

        return `
                <div class="${className}"
                    style="width: ${walW}px; height: ${walH}px; background-image: url(${wall.url})"
                    click-emit="setting_wallpaper_toggle:${index}"
                >${inner}</div>
                `
      })
      .join('')
  })

  // Render config
  window.setting_config_input.value = JSON.stringify(_core_storage__WEBPACK_IMPORTED_MODULE_0__["default"].config, null, 2)
}

setting.toggle = (state) => {
  if (state === undefined) {
    state = !setting.isOpen
  }

  setting.isOpen = state

  if (state) {
    window.setting_box.removeClass('hidden')
    setting.render()
  } else {
    window.setting_box.addClass('hidden')
  }
}

_core_event__WEBPACK_IMPORTED_MODULE_1__["default"].on('setting_close', () => {
  setting.toggle(false)
})

_core_event__WEBPACK_IMPORTED_MODULE_1__["default"].on('setting_open', () => {
  setting.toggle(true)
})

_core_event__WEBPACK_IMPORTED_MODULE_1__["default"].on('setting_backup', async () => {
  const now = new Date()
  const local = await chrome.storage.local.get()
  const data = {}

  data.local = local
  data.storage = window.localStorage

  const blob = new Blob([JSON.stringify(data)], { type: 'text/plain' })
  const url = URL.createObjectURL(blob)
  const anc = document.createElement('a')

  anc.href = url
  anc.download = 'sein-backup-' + now.toLocaleDateString().replace(/\//g, '-') + '.json'

  anc.click()
  URL.revokeObjectURL(url)
})

_core_event__WEBPACK_IMPORTED_MODULE_1__["default"].on('setting_restore', () => {
  const input = document.createElement('input')
  input.type = 'file'

  input.addEventListener(
    'change',
    () => {
      const file = input.files[0]
      const reader = new FileReader()

      reader.addEventListener('load', async () => {
        const { local, storage, notes } = JSON.parse(reader.result)

        if (storage) {
          for (const key of Object.keys(storage)) {
            window.localStorage[key] = storage[key]
          }
        }

        if (local) {
          await chrome.storage.local.set(local)
        }

        if (notes) {
          _noter__WEBPACK_IMPORTED_MODULE_2__["default"].notes = notes
          _noter__WEBPACK_IMPORTED_MODULE_2__["default"].save()
        }

        window.alert('Restore completed')
        window.location.reload()
      })

      reader.readAsText(file)
    },
    { once: true },
  )

  input.click()
})

_core_event__WEBPACK_IMPORTED_MODULE_1__["default"].on('setting_config_save', () => {
  try {
    const config = JSON.parse(window.setting_config_input.value)
    _core_storage__WEBPACK_IMPORTED_MODULE_0__["default"].config = config
  } catch (error) {
    console.error(error)
    return window.alert('Parse and save config error')
  }

  window.alert('Save config success')
})

_core_event__WEBPACK_IMPORTED_MODULE_1__["default"].on('setting_wallpaper_toggle', (index, { target }) => {
  index = +index

  chrome.storage.local.get('wallpapers', ({ wallpapers }) => {
    const isActive = target.className.indexOf('active') !== -1

    wallpapers[index].active = !isActive
    _wallpaper__WEBPACK_IMPORTED_MODULE_3__["default"].cache(wallpapers)

    chrome.storage.local.set({
      wallpapers,
    })

    if (isActive) {
      target.removeClass('active')
    } else {
      target.addClass('active')
    }
  })
})

_core_event__WEBPACK_IMPORTED_MODULE_1__["default"].on('setting_wallpaper_edit', (index, { target }) => {
  index = +index

  const input = document.createElement('input')
  input.type = 'file'

  input.addEventListener(
    'change',
    () => {
      const file = input.files[0]
      const reader = new FileReader()

      reader.addEventListener('load', async () => {
        if (file.type.startsWith('video/')) {
          const video = document.createElement('video')
          const source = document.createElement('source')
          const canvas = document.createElement('canvas')
          const context = canvas.getContext('2d')

          video.className = 'invisible'
          canvas.className = 'invisible'

          source.setAttribute('src', reader.result)
          source.setAttribute('type', file.type)
          video.appendChild(source)
          window.setting_box.appendChild(video)

          video.addEventListener('canplaythrough', () => {
            setTimeout(async () => {
              canvas.width = video.videoWidth
              canvas.height = video.videoHeight
              window.setting_box.appendChild(canvas)

              context.drawImage(video, 0, 0, video.videoWidth, video.videoHeight)

              const { wallpapers } = await chrome.storage.local.get('wallpapers')
              const result = canvas.toDataURL('image/jpeg')

              window.setting_box.removeChild(video)
              window.setting_box.removeChild(canvas)

              wallpapers[index].url = result
              wallpapers[index].video = index

              _wallpaper__WEBPACK_IMPORTED_MODULE_3__["default"].cache(wallpapers)

              chrome.storage.local.set({
                wallpapers,
                [`wallpaper_videos_${index}`]: reader.result,
              })

              const item = target.parentElement
              item.style.backgroundImage = `url(${result})`
            }, 200)
          })

          return
        }

        if (file.type.startsWith('image/')) {
          const { wallpapers } = await chrome.storage.local.get('wallpapers')

          wallpapers[index].url = reader.result

          _wallpaper__WEBPACK_IMPORTED_MODULE_3__["default"].cache(wallpapers)

          chrome.storage.local.set({
            wallpapers,
            [`wallpaper_videos_${index}`]: '',
          })

          const item = target.parentElement
          item.style.backgroundImage = `url(${reader.result})`

          return
        }

        alert('Only accept image or video')
      })

      reader.readAsDataURL(file)
    },
    { once: true },
  )

  input.click()
})

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (setting);


/***/ }),

/***/ "./src/wallpaper.js":
/*!**************************!*\
  !*** ./src/wallpaper.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _core_storage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core/storage */ "./src/core/storage.js");


const wallpaper = {
  default: {
    wallpapers: [
      {
        url: `img/w0.jpg`,
        video: 0,
        active: true,
      },
      {
        url: `img/w1.jpg`,
        video: 1,
      },
      {
        url: `img/w2.jpg`,
        video: 2,
      },
    ],
    local: {
      wallpaper_videos_0: 'video/w0.mp4',
      wallpaper_videos_1: 'video/w1.mp4',
      wallpaper_videos_2: 'video/w2.mp4',
    },
  },
}

wallpaper.init = () => {
  const wallpapers = wallpaper.default.wallpapers

  chrome.storage.local.set({
    ...wallpaper.default.local,

    wallpapers: wallpapers.concat(
      Array(9).fill({
        url: `img/placeholder.png`,
        editbale: true,
      }),
    ),
  })

  return wallpaper.cache(wallpapers)
}

wallpaper.cache = (wallpapers) => {
  try {
    const actives = wallpapers.filter((w) => w.active)
    _core_storage__WEBPACK_IMPORTED_MODULE_0__["default"].wallpapers = actives

    return actives
  } catch (error) {
    alert('The value of wallpapers exceeded the quota')
    throw error
  }
}

wallpaper.boot = () => {
  const wallpapers = _core_storage__WEBPACK_IMPORTED_MODULE_0__["default"].wallpapers || wallpaper.init()
  const pick = wallpapers[Math.floor(Math.random() * wallpapers.length)]

  if (!pick) {
    return
  }

  window.wall.style.backgroundImage = `url(${pick.url})`

  if (pick.video > -1) {
    setTimeout(() => {
      const key = `wallpaper_videos_${pick.video}`

      chrome.storage.local.get(key, (data) => {
        const source = document.createElement('source')

        source.src = data[key]
        source.type = 'video/mp4'

        window.wall_video.appendChild(source)
      })
    })
  }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (wallpaper);


/***/ }),

/***/ "./src/waver.js":
/*!**********************!*\
  !*** ./src/waver.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
const waver = {}

waver.add = (x, y) => {
  window.wave_click_box.innerHTML = `
    <div class="wave active" style="transform: translate(${x}px, ${y}px)">
        <div></div>
        <div></div>
        <div></div>
    </div>`
}

window.addEventListener('mouseup', (event) => {
  waver.add(event.clientX, event.clientY)
})

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (waver);


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _prototype__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./prototype */ "./src/prototype.js");
/* harmony import */ var _prototype__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_prototype__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _wallpaper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./wallpaper */ "./src/wallpaper.js");
/* harmony import */ var _core_emitter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./core/emitter */ "./src/core/emitter.js");
/* harmony import */ var _core_storage__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./core/storage */ "./src/core/storage.js");
/* harmony import */ var _core_logger__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./core/logger */ "./src/core/logger.js");
/* harmony import */ var _noter__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./noter */ "./src/noter.js");
/* harmony import */ var _bookmark__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./bookmark */ "./src/bookmark.js");
/* harmony import */ var _waver__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./waver */ "./src/waver.js");
/* harmony import */ var _setting__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./setting */ "./src/setting.js");










window.holder = {
  w_w: window.document.documentElement.clientWidth,
  w_h: window.document.documentElement.clientHeight,

  code_tables: [
    { code: 'date==', value: new Date().toLocaleDateString() },
    { code: 'time==', value: new Date().toLocaleTimeString() },
    { code: 'now==', value: new Date().toLocaleString() },
    { code: 'name_(.+?)==', value: 'Hi sir, $ <3' },
  ],
}

window.addEventListener('resize', () => {
  holder.w_w = window.document.documentElement.clientWidth
  holder.w_h = window.document.documentElement.clientHeight
})

_wallpaper__WEBPACK_IMPORTED_MODULE_1__["default"].boot()
_noter__WEBPACK_IMPORTED_MODULE_5__["default"].boot()
_bookmark__WEBPACK_IMPORTED_MODULE_6__["default"].boot()
_core_emitter__WEBPACK_IMPORTED_MODULE_2__["default"].click()

_core_storage__WEBPACK_IMPORTED_MODULE_3__["default"].config = Object.assign(
  {
    log_level: 'error',
    number_of_workspace: 2,
  },
  _core_storage__WEBPACK_IMPORTED_MODULE_3__["default"].config,
)

if (_core_storage__WEBPACK_IMPORTED_MODULE_3__["default"].workspace) {
  if (_core_storage__WEBPACK_IMPORTED_MODULE_3__["default"].workspace === -1) {
    _core_storage__WEBPACK_IMPORTED_MODULE_3__["default"].workspace++
  }

  window.btn_switch_workspace.innerHTML = _core_storage__WEBPACK_IMPORTED_MODULE_3__["default"].workspace
} else {
  window.btn_switch_workspace.innerHTML = '0'
}

_core_logger__WEBPACK_IMPORTED_MODULE_4__["default"].log_level = _core_storage__WEBPACK_IMPORTED_MODULE_3__["default"].config.log_level

})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,